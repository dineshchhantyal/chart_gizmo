{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Chart Gizmo","text":"<p>A H5Gizmos Library wrapper for Chart.js for creating applications including interactive charts.</p> <p>This documentation will help you get started with Chart Gizmo, show you examples, explain the API, and demonstrate the command-line tools.</p>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Introduction</li> <li>Installation</li> <li>Examples</li> <li>API Reference</li> <li>Command Line Tools</li> </ul>"},{"location":"cli/","title":"Cli","text":"<p>'# Command Line Scripts</p> <p>Chart Gizmo provides several command-line scripts for quick visualization of data.</p> <p>Note: All command-line tools are now documented in the CLI documentation section.</p> <p>This page has been migrated to a more organized structure. Please visit the CLI documentation for detailed documentation of each command-line tool.</p>"},{"location":"cli/#available-command-line-tools","title":"Available Command Line Tools","text":"<p>Chart Gizmo provides the following command-line tools:</p> <ul> <li>Bar Chart CLI - Create bar charts from CSV files</li> <li>Line Chart CLI - Create line charts from CSV files</li> <li>Bubble Chart CLI - Create bubble charts from CSV files</li> <li>Histogram CLI - Create histograms from data files</li> <li>Pie Chart CLI - Create pie/donut charts from CSV files</li> </ul> <p>For detailed documentation on each tool, including examples and options, please click on the links above.</p>"},{"location":"cli/#options","title":"Options","text":"<ul> <li><code>-b</code>, <code>--bins</code>: Number of bins for the histogram</li> <li><code>-d</code>, <code>--density</code>: Create a density plot instead of frequency count</li> <li><code>-r</code>, <code>--range</code>: Range of values to include (min max)</li> <li><code>-w</code>, <code>--width</code>: Width of the chart in pixels</li> <li><code>--height</code>: Height of the chart in pixels</li> <li><code>--title</code>: Chart title</li> <li><code>--x-label</code>: Label for x-axis</li> <li><code>--y-label</code>: Label for y-axis</li> </ul>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.7 or higher</li> <li>pip (Python package installer)</li> <li>H5Gizmos (installed automatically as dependency)</li> <li>Chart.js (included in the package)</li> </ul>"},{"location":"installation/#development-installation","title":"Development Installation","text":"<p>For development or contributing to the project:</p> <pre><code># Clone the repository\ngit clone https://github.com/AaronWatters/chart_gizmo\ncd chart_gizmo\n\n# Create a virtual environment\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n\n# Install dependencies and development version\npip install --upgrade pip setuptools build\npip install -e .\n</code></pre>"},{"location":"installation/#verifying-installation","title":"Verifying Installation","text":"<p>After installation, you should be able to run the command-line tools:</p> <pre><code>histogram-gizmo --help\ncsv-bar-gizmo --help\ncsv-line-gizmo --help\ncsv-bubble-gizmo --help\n</code></pre>"},{"location":"introduction/","title":"Introduction","text":"<p>Chart Gizmo is a Python library that provides a wrapper around Chart.js using the H5Gizmos library. It allows you to create interactive charts and visualizations in web browsers from Python.</p>"},{"location":"introduction/#features","title":"Features","text":"<ul> <li>Create bar charts, line charts, bubble charts, and histograms</li> <li>Customize chart appearance and behavior</li> <li>Command-line tools for quick visualization from CSV and other data files</li> <li>Interactive elements through H5Gizmos integration</li> <li>Easy-to-use Python API that leverages the power of Chart.js</li> </ul>"},{"location":"api/","title":"API Reference","text":"<p>Chart Gizmo provides several modules for creating different types of charts using Chart.js through the H5Gizmos library:</p> <ul> <li>Charts - Base chart functionality</li> <li>Bars - Bar chart creation</li> <li>Lines - Line chart creation</li> <li>Bubbles - Bubble chart creation</li> <li>Histogram - Histogram creation</li> <li>Pie - Pie chart creation</li> <li>Box Plot - Box plot (box-and-whisker) chart creation</li> </ul> <p>Each module provides classes and functions for creating and customizing charts. The API closely follows Chart.js structure and options while providing a Pythonic interface.</p>"},{"location":"api/bars/","title":"Bars","text":"<p>The <code>BarChart</code> and related classes provide bar chart functionality based on Chart.js Bar Charts.</p> <p></p>"},{"location":"api/bars/#basic-usage","title":"Basic Usage","text":"<pre><code>from chart_gizmo.bars import BarChart\nfrom H5Gizmos import serve\n\n# Create a bar chart comparing quarterly sales data\nchart = BarChart()\n\n# Add product categories\nchart.add_label(\"Electronics\")\nchart.add_label(\"Clothing\")\nchart.add_label(\"Home Goods\")\n\n# Add quarterly data for each product category\nchart.add_data_values(\"Q1\", [45000, 32000, 28000], background_color=\"#3366CC\")\nchart.add_data_values(\"Q2\", [52000, 38000, 31000], background_color=\"#DC3912\")\nchart.add_data_values(\"Q3\", [48000, 42000, 36000], background_color=\"#FF9900\")\nchart.add_data_values(\"Q4\", [60000, 52000, 40000], background_color=\"#109618\")\n\n# Display the chart\nserve(chart.show())\n</code></pre>"},{"location":"api/bars/#class-barchart","title":"Class: BarChart","text":"<p>Location: <code>chart_gizmo/bars.py</code></p>"},{"location":"api/bars/#description","title":"Description","text":"<p>A class to represent a bar chart. Inherits from <code>AbstractChart</code>.</p>"},{"location":"api/bars/#key-methods","title":"Key Methods","text":"<ul> <li><code>add_label(label, values=())</code>: Add a label to the chart.</li> <li><code>add_dataset(dataset)</code>: Add a dataset to the chart.</li> <li><code>add_data_values(label, values=(), background_color=None, border_color=None, border_width=1)</code>: Add data values to the chart.</li> <li><code>get_configuration()</code>: Get the chart configuration.</li> <li><code>saveImage(filepath)</code>: Asynchronous method to save the chart as a PNG image file. Must be awaited when called. See Chart Image Export Example.<ul> <li><code>filepath</code>: Path where the image file will be saved</li> </ul> </li> <li><code>on_click_call(callback, action='click', selection='nearest')</code>: Set a callback function for click events on the chart. See OnClick Event Example.</li> </ul>"},{"location":"api/bars/#class-tabularbarchart","title":"Class: TabularBarChart","text":"<p>Location: <code>chart_gizmo/bars.py</code></p>"},{"location":"api/bars/#description_1","title":"Description","text":"<p>Create a bar chart from a tabular data source (a list of dictionaries).</p>"},{"location":"api/bars/#constructor-parameters","title":"Constructor Parameters","text":"<ul> <li><code>dictionaries</code>: List of dictionaries containing the data</li> <li><code>label_column</code>: Name of the column to use for x-axis labels</li> <li><code>value_column</code>: Name of the column to use for y-axis values</li> <li><code>group_column</code>: Name of the column to use for grouping (optional)</li> <li><code>width</code>: Chart width in pixels (default: 400)</li> <li><code>height</code>: Chart height in pixels (default: 400)</li> <li><code>stacked</code>: Whether to use stacked bars (default: False)</li> <li><code>configuration</code>: Chart.js configuration (optional)</li> <li><code>options</code>: Additional chart options (optional)</li> <li><code>title</code>: Chart title (optional)</li> <li><code>animate</code> (bool): Enable or disable animations. Default is <code>False</code> (no animation). Controlled by the symbolic constant <code>ANIMATION_DEFAULT</code>.</li> </ul>"},{"location":"api/bars/#example","title":"Example","text":"<pre><code>from chart_gizmo.bars import TabularBarChart\nfrom H5Gizmos import serve\n\ndata = [\n    {\"label\": \"A\", \"group\": \"Red\", \"value\": 12},\n    {\"label\": \"B\", \"group\": \"Red\", \"value\": 1},\n    {\"label\": \"A\", \"group\": \"Blue\", \"value\": 1},\n    {\"label\": \"B\", \"group\": \"Blue\", \"value\": 19},\n]\nchart = TabularBarChart(\n    dictionaries=data,\n    label_column=\"label\",\n    group_column=\"group\",\n    value_column=\"value\",\n    stacked=True,\n)\nserve(chart.show())\n</code></pre>"},{"location":"api/bars/#class-csvbarchart","title":"Class: CSVBarChart","text":"<p>Location: <code>chart_gizmo/bars.py</code></p>"},{"location":"api/bars/#description_2","title":"Description","text":"<p>Create a bar chart from a CSV file. Inherits from <code>TabularBarChart</code>.</p>"},{"location":"api/bars/#constructor-parameters_1","title":"Constructor Parameters","text":"<ul> <li><code>csv_file</code>: Path to the CSV file</li> <li><code>label_column</code>: Name of the column to use for x-axis labels</li> <li><code>value_column</code>: Name of the column to use for y-axis values</li> <li><code>group_column</code>: Name of the column to use for grouping (optional)</li> <li><code>width</code>: Chart width in pixels (default: 400)</li> <li><code>height</code>: Chart height in pixels (default: 400)</li> <li><code>stacked</code>: Whether to use stacked bars (default: False)</li> <li><code>configuration</code>: Chart.js configuration (optional)</li> <li><code>options</code>: Additional chart options (optional)</li> <li><code>title</code>: Chart title (optional)</li> <li><code>animate</code> (bool): Enable or disable animations. Default is <code>False</code> (no animation). Controlled by the symbolic constant <code>ANIMATION_DEFAULT</code>.</li> </ul>"},{"location":"api/bars/#example_1","title":"Example","text":"<pre><code>from chart_gizmo.bars import CSVBarChart\nfrom H5Gizmos import serve\n\nchart = CSVBarChart(\n    csv_file=\"data.csv\",\n    label_column=\"Category\",\n    value_column=\"Amount\",\n    group_column=\"Year\",\n    width=800,\n    height=600,\n    stacked=True,\n    title=\"Sales by Category and Year\"\n)\nserve(chart.show())\n</code></pre>"},{"location":"api/bars/#command-line-script","title":"Command-line Script","text":"<ul> <li><code>CSVBarChartScript()</code>: Command-line entrypoint for CSVBarChart.</li> </ul> <p>See the Bar Chart CLI documentation for detailed usage instructions on the command-line tool.</p>"},{"location":"api/boxplot/","title":"Box Plot Charts","text":"<p>Box plots visualize the distribution of numerical data through their quartiles, highlighting the median, spread, and outliers. Chart Gizmo's boxplot charts are built on Chart.js BoxPlot plugin.</p> <p></p>"},{"location":"api/boxplot/#basic-usage","title":"Basic Usage","text":"<pre><code>from chart_gizmo.boxplot import BoxPlotChart\nfrom H5Gizmos import serve\nimport numpy as np\n\nchart = BoxPlotChart(title=\"Monthly Revenue Distribution\")\nfor month in [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"]:\n    chart.add_label(month)\nchart.add_data_values(\"2023\", [np.random.normal(100, 20, 100).tolist() for _ in range(6)], background_color=\"#3366CC\")\nchart.add_data_values(\"2024\", [np.random.normal(120, 30, 100).tolist() for _ in range(6)], background_color=\"#DC3912\")\nserve(chart.show())\n</code></pre>"},{"location":"api/boxplot/#class-boxplotchart","title":"Class: BoxPlotChart","text":"<p>Location: <code>chart_gizmo/boxplot.py</code></p>"},{"location":"api/boxplot/#description","title":"Description","text":"<p>A class to represent a box plot chart. Inherits from <code>AbstractChart</code>.</p>"},{"location":"api/boxplot/#constructor-parameters","title":"Constructor Parameters","text":"<ul> <li><code>configuration</code>: Chart.js configuration (optional)</li> <li><code>width</code>: Chart width in pixels (default: 600)</li> <li><code>height</code>: Chart height in pixels (default: 400)</li> <li><code>options</code>: Additional chart options (optional)</li> <li><code>title</code>: Chart title (optional)</li> <li><code>stacked</code>: Whether to stack boxplots (default: False)</li> <li><code>animate</code> (bool): Enable or disable animations. Default is <code>False</code> (no animation). Controlled by the symbolic constant <code>ANIMATION_DEFAULT</code>.</li> </ul>"},{"location":"api/boxplot/#key-methods","title":"Key Methods","text":"<ul> <li><code>add_label(label)</code>: Add a label to the chart (e.g., x-axis category)</li> <li><code>add_data_values(label, values, background_color=None, border_color=None, border_width=1, ...)</code>: Add a dataset of boxplot values. <code>values</code> should be a list of arrays (one per label), or a list of lists.</li> <li><code>get_configuration()</code>: Get the chart configuration.</li> <li><code>saveImage(filepath)</code>: Asynchronous method to save the chart as a PNG image file. Must be awaited when called. See Chart Image Export Example.</li> <li><code>on_click_call(callback, action='click', selection='nearest')</code>: Set a callback function for click events on the chart. See OnClick Event Example.</li> </ul>"},{"location":"api/boxplot/#class-csvboxplotchart","title":"Class: CSVBoxPlotChart","text":"<p>Location: <code>chart_gizmo/boxplot.py</code></p>"},{"location":"api/boxplot/#description_1","title":"Description","text":"<p>Create a boxplot chart from a CSV file. Supports classic and grouped boxplots.</p>"},{"location":"api/boxplot/#constructor-parameters_1","title":"Constructor Parameters","text":"<ul> <li><code>csv_file</code>: Path to the CSV file</li> <li><code>columns</code>: List of columns to include as boxes (default: all except group column)</li> <li><code>group_column</code>: Name of the column to group by (optional)</li> <li><code>width</code>: Chart width in pixels (default: 600)</li> <li><code>height</code>: Chart height in pixels (default: 400)</li> <li><code>title</code>: Chart title (optional)</li> <li><code>animate</code> (bool): Enable or disable animations. Default is <code>False</code> (no animation). Controlled by the symbolic constant <code>ANIMATION_DEFAULT</code>.</li> </ul>"},{"location":"api/boxplot/#example-classic-boxplot-from-csv","title":"Example: Classic Boxplot from CSV","text":"<pre><code>from chart_gizmo.boxplot import CSVBoxPlotChart\nfrom H5Gizmos import serve\n\nchart = CSVBoxPlotChart(\n    csv_file=\"data/data.csv\",\n    columns=[\"Amount\", \"Score\"]\n)\nserve(chart.show())\n</code></pre>"},{"location":"api/boxplot/#example-grouped-boxplot-from-csv","title":"Example: Grouped Boxplot from CSV","text":"<pre><code>from chart_gizmo.boxplot import CSVBoxPlotChart\nfrom H5Gizmos import serve\n\nchart = CSVBoxPlotChart(\n    csv_file=\"data/data.csv\",\n    columns=[\"Amount\"],\n    group_column=\"Year\",\n    title=\"Box Plot Example\",\n)\nserve(chart.show())\n</code></pre>"},{"location":"api/boxplot/#see-also","title":"See Also","text":"<ul> <li>Boxplot Chart CLI</li> <li>AbstractChart API</li> </ul>"},{"location":"api/bubbles/","title":"Bubbles","text":"<p>The <code>BubbleChart</code> and related classes provide bubble chart functionality based on Chart.js Bubble Charts.</p> <p></p>"},{"location":"api/bubbles/#basic-usage","title":"Basic Usage","text":"<pre><code>from chart_gizmo.bubbles import BubbleChart\nfrom H5Gizmos import serve\n\n# Create a bubble chart with tooltips and labels\nchart = BubbleChart(width=600, height=400, title=\"Population vs. Cost of Living\")\n\n# Add bubble data values (list of dicts with x, y, r, label, tooltip)\nchart.add_data_values(\"West Coast\", [\n    {\"x\": 10, \"y\": 20, \"r\": 8, \"label\": \"San Francisco\", \"tooltip\": \"San Francisco: High tech hub\"},\n    {\"x\": 25, \"y\": 15, \"r\": 12, \"label\": \"Los Angeles\", \"tooltip\": \"LA: Entertainment capital\"},\n    {\"x\": 40, \"y\": 30, \"r\": 6, \"label\": \"Portland\", \"tooltip\": \"Portland: Rose City\"}\n], background_color=\"rgba(54, 162, 235, 0.5)\")\n\nchart.add_data_values(\"East Coast\", [\n    {\"x\": 15, \"y\": 25, \"r\": 10, \"label\": \"New York\", \"tooltip\": \"NYC: Financial center\"},\n    {\"x\": 30, \"y\": 18, \"r\": 7, \"label\": \"Boston\", \"tooltip\": \"Boston: Academic hub\"},\n], background_color=\"rgba(255, 99, 132, 0.5)\")\n\n# Display the chart\nserve(chart.show())\n</code></pre>"},{"location":"api/bubbles/#class-bubblechart","title":"Class: BubbleChart","text":"<p>Location: <code>chart_gizmo/bubbles.py</code></p>"},{"location":"api/bubbles/#description","title":"Description","text":"<p>A class to represent a bubble chart. Inherits from <code>AbstractChart</code>.</p>"},{"location":"api/bubbles/#constructor-parameters","title":"Constructor Parameters","text":"<ul> <li><code>configuration</code>: Chart data configuration</li> <li><code>width</code>: Chart width in pixels (default: 400)</li> <li><code>height</code>: Chart height in pixels (default: 400)</li> <li><code>stacked</code>: Whether the chart is stacked (not used for bubble charts)</li> <li><code>options</code>: Additional chart options</li> <li><code>title</code>: Chart title</li> <li><code>r_column</code>: Column for radius values</li> <li><code>x_column</code>: Column for x-axis values</li> <li><code>y_column</code>: Column for y-axis values</li> <li><code>group_column</code>: Column for grouping data</li> <li><code>min_radius</code>: Minimum radius for bubbles (default: 5)</li> <li><code>max_radius</code>: Maximum radius for bubbles (default: 20)</li> <li><code>animate</code>(bool): Enable or disable animations. Default is <code>False</code> (no animation). Controlled by the symbolic constant <code>ANIMATION_DEFAULT</code>.</li> </ul>"},{"location":"api/bubbles/#key-methods","title":"Key Methods","text":"<ul> <li> <p><code>add_data_values(label, values, background_color=None, border_color=None, border_width=1)</code>: Add data values to the chart.</p> <ul> <li><code>label</code>: The dataset label</li> <li><code>values</code>: List of data points. Each data point is a dictionary with:<ul> <li><code>x</code>: x-coordinate value</li> <li><code>y</code>: y-coordinate value</li> <li><code>r</code>: radius value</li> <li><code>label</code> (optional): Text label to display on the bubble</li> <li><code>tooltip</code> (optional): Custom tooltip text for the bubble</li> </ul> </li> <li><code>background_color</code>: Background color for bubbles</li> <li><code>border_color</code>: Border color for bubbles</li> <li><code>border_width</code>: Border width for bubbles</li> </ul> </li> <li> <p><code>get_default_options()</code>: Get the default options for the bubble chart.</p> </li> <li><code>saveImage(filepath)</code>: Asynchronous method to save the chart as a PNG image file. Must be awaited when called. See Chart Image Export Example.<ul> <li><code>filepath</code>: Path where the image file will be saved</li> </ul> </li> <li><code>on_click_call(callback, action='click', selection='nearest')</code>: Set a callback function for click events on the chart. See OnClick Event Example.</li> </ul> <p>Note: You can use Python assignment expressions to set coordinates and include them in tooltips, for example:</p> <pre><code>{\"x\": (x:= 10), \"y\": (y:= 20), \"r\": 8, \"label\": \"San Francisco\", \"tooltip\": f\"San Francisco: High tech hub (x: {x}, y: {y})\"}\n</code></pre>"},{"location":"api/bubbles/#class-csvbubblechart","title":"Class: CSVBubbleChart","text":"<p>Location: <code>chart_gizmo/bubbles.py</code></p>"},{"location":"api/bubbles/#description_1","title":"Description","text":"<p>Loads a CSV and creates a bubble chart.</p>"},{"location":"api/bubbles/#constructor-parameters_1","title":"Constructor Parameters","text":"<p>All parameters from <code>BubbleChart</code>, plus:</p> <ul> <li><code>csv_file</code>: Path to the CSV file</li> <li><code>bubble_label_column</code>: Column to use for bubble labels</li> <li><code>tooltip_columns</code>: List of columns to use for tooltip content. Accepts a list of column names (space-separated or comma-separated).</li> <li><code>animate</code>: Enable or disable animations (default: <code>False</code>)</li> </ul>"},{"location":"api/bubbles/#example","title":"Example","text":"<pre><code>from chart_gizmo.bubbles import CSVBubbleChart\nfrom H5Gizmos import serve\n\n# Create a bubble chart from CSV data\nchart = CSVBubbleChart(\n    csv_file=\"gapminderDataFiveYear.csv\",\n    x_column=\"gdpPercap\",\n    y_column=\"lifeExp\",\n    r_column=\"pop\",\n    group_column=\"continent\",\n    width=900,\n    height=600,\n    min_radius=3,\n    max_radius=20,\n    title=\"GDP vs Life Expectancy\",\n    tooltip_columns=[\"country\", \"year\"],  # Multiple columns for tooltip\n    bubble_label_column=\"country\"\n)\n\n# Add logarithmic scaling to the x-axis\nchart.logarithmic(axis=\"x\")\n\n# Display the chart\nserve(chart.show())\n</code></pre>"},{"location":"api/bubbles/#command-line-script","title":"Command-line Script","text":"<p>The module provides a command-line interface for creating bubble charts from CSV files.</p> <p>See the Bubble Chart CLI documentation for detailed usage instructions on the command-line tool.</p>"},{"location":"api/charts/","title":"Charts (Base Class)","text":"<p>The <code>AbstractChart</code> class is the base for all chart types in Chart Gizmo. It provides common methods and configuration for bar, line, bubble, and histogram charts, building upon the functionality of Chart.js and delivered through H5Gizmos.</p>"},{"location":"api/charts/#class-abstractchart","title":"Class: AbstractChart","text":"<p>Location: <code>chart_gizmo/abstract_chart.py</code></p> <p>Inherits from: <code>RawChart</code></p> <p>Description: Base class for all chart types (bar, line, bubble, etc.) that provides common functionality while specific chart types set their own chart type. It handles data configuration, chart options, and interactions with the Chart.js library.</p>"},{"location":"api/charts/#constructor","title":"Constructor","text":"<pre><code>AbstractChart(configuration=None, width=400, height=400, stacked=False, options=None)\n</code></pre> <p>Parameters:</p> <ul> <li><code>configuration</code>: Optional dictionary with chart configuration. If provided, it overrides other parameters.</li> <li><code>width</code>: Chart width in pixels (default: 400)</li> <li><code>height</code>: Chart height in pixels (default: 400)</li> <li><code>stacked</code>: Boolean indicating whether the chart should be stacked (default: False)</li> <li><code>options</code>: Optional dictionary with Chart.js options</li> <li><code>animate</code>: Boolean to enable or disable animations (default: False, controlled by the symbolic constant <code>ANIMATION_DEFAULT</code>)</li> <li><code>responsive</code>: Make chart fits in screen also maintaining aspect ratio, <code>False</code> if height or weight is provided or flag is provided (default: <code>True</code>, controlled by the symbolic constant <code>RESPONSIVE_DEFAULT</code>)</li> </ul>"},{"location":"api/charts/#key-methods","title":"Key Methods","text":"<ul> <li><code>clear()</code>: Clear the chart data and return the chart instance for method chaining.</li> <li><code>update()</code>: Update the chart's rendered data and return the chart instance.</li> <li><code>add_label(label, values=())</code>: Add a label to the chart with optional values. Returns the chart instance.<ul> <li><code>label</code>: Label text</li> <li><code>values</code>: Optional values associated with the label</li> </ul> </li> <li><code>add_dataset(dataset)</code>: Add a dataset object to the chart. Returns the chart instance.<ul> <li><code>dataset</code>: A <code>DataSet</code> object containing data to be visualized</li> </ul> </li> <li><code>add_data_values(label, values=(), background_color=None, border_color=None, border_width=1)</code>: Add data values to the chart with styling options. Returns the chart instance.<ul> <li><code>label</code>: Label for the dataset</li> <li><code>values</code>: Values for the dataset</li> <li><code>background_color</code>: Background color for the dataset elements</li> <li><code>border_color</code>: Border color for the dataset elements</li> <li><code>border_width</code>: Border width for the dataset elements</li> </ul> </li> <li><code>get_configuration()</code>: Get the complete chart configuration as a dictionary ready for Chart.js.</li> <li><code>get_default_options()</code>: Get the default chart options, can be overridden by subclasses.</li> <li><code>saveImage(filepath)</code>: Asynchronous method to save the chart as a PNG image file. Must be awaited when called. See Chart Image Export Example.<ul> <li><code>filepath</code>: Path where the image file will be saved</li> </ul> </li> <li><code>on_click_call(callback, action='click', selection='nearest')</code>: Set a callback function for click events on the chart. This method uses the Chart.js getElementsAtEventForMode API under the hood. See OnClick Event Example.<ul> <li><code>callback</code>: Function to be called when the chart is clicked.</li> <li><code>action</code>: Type of action to listen for (default: <code>'click'</code>).</li> <li><code>selection</code>: Selection mode for the click event (default: <code>'nearest'</code>).</li> </ul> </li> <li> <p><code>logarithmic(axis='y', value=True)</code>: Set the specified axis (default: 'y') to a logarithmic scale. This method modifies the chart configuration to use a logarithmic scale for the given axis. It can be chained with other methods for configuration. Returns the chart instance for method chaining.</p> <ul> <li><code>axis</code> (str): The axis to set to logarithmic scale. Default is <code>'y'</code>.</li> <li><code>value</code> (bool): Whether to enable (<code>True</code>) or disable (<code>False</code>) the logarithmic scale. Default is <code>True</code>.</li> </ul> </li> </ul> <p>All specific chart types inherit from this class and may override or extend its methods. The configuration options follow Chart.js documentation but are exposed through a Python interface.</p>"},{"location":"api/examples/","title":"Examples","text":"<p>Each of the following examples launches a browser frame using H5Gizmos to render Chart.js visualizations. The application will terminate when you close the frame. All examples use these libraries, so we'll only reference them here instead of repeating in each example.</p>"},{"location":"api/examples/#running-the-examples","title":"Running the Examples","text":"<p>Note: All example commands below assume you are running them from the <code>/examples</code> directory of your Chart Gizmo installation. Syntactic data are used in these examples.</p> <p>Navigate to the examples directory in the repository:</p> <pre><code>cd (repository)/examples\n</code></pre>"},{"location":"api/examples/#bar-chart-examples","title":"Bar Chart Examples","text":"<pre><code>python example_barchart.py\npython state_barcharts.py\n</code></pre>"},{"location":"api/examples/#line-chart-examples","title":"Line Chart Examples","text":"<pre><code>python example_linechart.py\npython state_linecharts.py\n</code></pre>"},{"location":"api/examples/#bubble-chart-examples","title":"Bubble Chart Examples","text":"<pre><code>python example_bubblechart.py\npython gapimder_bubblecharts.py\npython tooltip_customization.py\n</code></pre>"},{"location":"api/examples/#histogram-example","title":"Histogram Example","text":"<pre><code>python example_histogram.py\n</code></pre>"},{"location":"api/examples/#raw-chart-example","title":"Raw Chart Example","text":"<pre><code>python raw_chart.py\n</code></pre>"},{"location":"api/examples/#code-examples","title":"Code Examples","text":""},{"location":"api/examples/#bar-chart-quarterly-sales-comparison","title":"Bar Chart: Quarterly Sales Comparison","text":"<pre><code>from H5Gizmos import serve\nimport chart_gizmo.bars as bars\n\n# Create a bar chart comparing quarterly sales data\nchart = bars.BarChart()\n\n# Add product categories\nchart.add_label(\"Electronics\")\nchart.add_label(\"Clothing\")\nchart.add_label(\"Home Goods\")\n\n# Add quarterly data for each product category\nchart.add_data_values(\"Q1\", [45000, 32000, 28000], background_color=\"#3366CC\")\nchart.add_data_values(\"Q2\", [52000, 38000, 31000], background_color=\"#DC3912\")\nchart.add_data_values(\"Q3\", [48000, 42000, 36000], background_color=\"#FF9900\")\nchart.add_data_values(\"Q4\", [60000, 52000, 40000], background_color=\"#109618\")\n\n# Display the chart\nserve(chart.show())\n</code></pre>"},{"location":"api/examples/#line-chart-monthly-temperature-trends","title":"Line Chart: Monthly Temperature Trends","text":"<pre><code>from H5Gizmos import serve\nimport chart_gizmo.lines as lines\n\n# Create a line chart for monthly temperature data\nchart = lines.LineChart()\n\n# Add month labels\nchart.add_label(\"Jan\")\nchart.add_label(\"Feb\")\nchart.add_label(\"Mar\")\nchart.add_label(\"Apr\")\nchart.add_label(\"May\")\nchart.add_label(\"Jun\")\n\n# Add temperature data for two cities\nchart.add_data_values(\"New York\", [3, 4, 8, 15, 21, 26],\n                      background_color=\"rgba(54, 162, 235, 0.2)\",\n                      border_color=\"rgba(54, 162, 235, 1)\")\nchart.add_data_values(\"San Francisco\", [12, 13, 14, 15, 16, 17],\n                      background_color=\"rgba(255, 99, 132, 0.2)\",\n                      border_color=\"rgba(255, 99, 132, 1)\")\n\n# Customize chart options\nchart.options = {\n    \"responsive\": True,\n    \"maintainAspectRatio\": False,\n    \"plugins\": {\n        \"title\": {\n            \"display\": True,\n            \"text\": \"Average Monthly Temperatures (\u00b0C)\",\n            \"font\": {\"size\": 16}\n        }\n    },\n    \"scales\": {\n        \"y\": {\n            \"title\": {\"display\": True, \"text\": \"Temperature (\u00b0C)\"}\n        },\n        \"x\": {\n            \"title\" : {\"display\": True, \"text\": \"Month\"}\n        }\n    }\n}\n\n# Display the chart\nserve(chart.show())\n</code></pre>"},{"location":"api/examples/#bubble-chart-simple-city-data","title":"Bubble Chart: Simple City Data","text":"<pre><code>from H5Gizmos import serve\nimport chart_gizmo.bubbles as bubbles\n\n# Create a simple bubble chart for city data\nchart = bubbles.BubbleChart()\n\n# Add bubble data values (list of dicts with x, y, r)\nchart.add_data_values(\"West Coast\", [\n    {\"x\": 10, \"y\": 20, \"r\": 8},   # City A\n    {\"x\": 25, \"y\": 15, \"r\": 12},  # City B\n    {\"x\": 40, \"y\": 30, \"r\": 6}    # City C\n], background_color=\"rgba(54, 162, 235, 0.5)\")\n\nchart.add_data_values(\"East Coast\", [\n    {\"x\": 15, \"y\": 25, \"r\": 10},   # City D\n    {\"x\": 30, \"y\": 18, \"r\": 7},    # City E\n], background_color=\"rgba(255, 99, 132, 0.5)\")\n\n# Customize chart options\nchart.options = {\n    \"responsive\": True,\n    \"maintainAspectRatio\": False,\n    \"plugins\": {\n        \"title\": {\n            \"display\": True,\n            \"text\": \"City Data Comparison\",\n            \"font\": {\"size\": 16}\n        }\n    },\n    \"scales\": {\n        \"x\": {\n            \"title\": {\"display\": True, \"text\": \"Metric X\"}\n        },\n        \"y\": {\n            \"title\": {\"display\": True, \"text\": \"Metric Y\"}\n        }\n    }\n}\n\n# Display the chart\nserve(chart.show())\n</code></pre>"},{"location":"api/examples/#bubble-chart-economics-and-health-indicators","title":"Bubble Chart: Economics and Health Indicators","text":"<pre><code>from H5Gizmos import serve\nimport chart_gizmo.bubbles as bubbles\n\n# Create a bubble chart showing economic and health data\nchart = bubbles.BubbleChart()\n\n# Define the reference year\ncurrent_year = 2023\n\n# Add city data with population, GDP per capita, and life expectancy\ncities_data = [\n    {\"name\": \"New York\", \"population\": 8500000, \"gdp_per_capita\": 75000, \"life_expectancy\": 81, \"area\": 784},\n    {\"name\": \"Tokyo\", \"population\": 13900000, \"gdp_per_capita\": 45000, \"life_expectancy\": 84, \"area\": 2194},\n    {\"name\": \"Mumbai\", \"population\": 20400000, \"gdp_per_capita\": 12000, \"life_expectancy\": 74, \"area\": 603},\n    {\"name\": \"Berlin\", \"population\": 3700000, \"gdp_per_capita\": 41000, \"life_expectancy\": 82, \"area\": 892},\n    {\"name\": \"Rio\", \"population\": 6700000, \"gdp_per_capita\": 17000, \"life_expectancy\": 76, \"area\": 1221}\n]\n\n# Add data values with size (r) proportional to population\nchart.add_data_values(\"Global Cities\", [\n    {\"x\": city[\"gdp_per_capita\"],\n     \"y\": city[\"life_expectancy\"],\n     \"r\": city[\"population\"] / 500000,  # Scale population for reasonable bubble size\n    } for city in cities_data\n], background_color=\"rgba(75, 192, 192, 0.6)\", border_color=\"rgba(75, 192, 192, 1)\")\n\n# Configure chart options\nchart.options = {\n    \"responsive\": True,\n    \"maintainAspectRatio\": False,\n    \"scales\": {\n        \"x\": {\n            \"type\": \"logarithmic\",\n            \"min\": 10000,\n            \"max\": 100000,\n            \"title\": {\"display\": True, \"text\": \"GDP per Capita (log scale)\"}\n        },\n        \"y\": {\n            \"min\": 70,\n            \"max\": 85,\n            \"title\": {\"display\": True, \"text\": \"Life Expectancy (years)\"}\n        }\n    },\n    \"plugins\": {\n        \"title\": {\n            \"display\": True,\n            \"text\": f\"Global Cities Comparison ({current_year})\",\n            \"font\": {\"size\": 18}\n        },\n        \"subtitle\": {\n            \"display\": True,\n            \"text\": \"Bubble size represents population\",\n            \"font\": {\"size\": 14},\n            \"padding\": {\"top\": 10, \"bottom\": 30}\n        },\n\n    }\n}\n\n# Display the chart\nserve(chart.show())\n</code></pre>"},{"location":"api/examples/#histogram-bimodal-distribution-analysis","title":"Histogram: Bimodal Distribution Analysis","text":"<pre><code>\"\"\"\nExample of creating and displaying a histogram using HistogramBarChart\n\"\"\"\nfrom H5Gizmos import serve\nimport numpy as np\nfrom chart_gizmo.histogrambar import HistogramBarChart\n\n# Generate sample data - a mix of two normal distributions\nnp.random.seed(42)  # For reproducibility\ndata1 = np.random.normal(loc=0, scale=1, size=1000)  # Mean 0, Std dev 1\ndata2 = np.random.normal(loc=3, scale=0.5, size=500)  # Mean 3, Std dev 0.5\ncombined_data = np.concatenate([data1, data2])\n\n# Create the histogram with 40 bins\nhistogram = HistogramBarChart(\n    data=combined_data,\n    bins=40,\n    width=900,\n    height=500,\n    density=True,  # Normalize to create a probability density\n    x_label=\"Value\",\n    y_label=\"Probability Density\"\n)\n\n# Customize the chart appearance\nhistogram.options[\"plugins\"][\"title\"][\"text\"] = \"Bimodal Distribution Analysis\"\nhistogram.options[\"plugins\"][\"title\"][\"font\"][\"size\"] = 18\nhistogram.options[\"plugins\"][\"subtitle\"] = {\n    \"display\": True,\n    \"text\": \"Mixture of Two Normal Distributions (\u03bc\u2081=0, \u03c3\u2081=1, n\u2081=1000; \u03bc\u2082=3, \u03c3\u2082=0.5, n\u2082=500)\",\n    \"font\": {\"size\": 14},\n    \"padding\": {\"top\": 10, \"bottom\": 30}\n}\n\n# Display the histogram\nserve(histogram.show())\n</code></pre>"},{"location":"api/examples/#bar-chart-api-methods-demonstration","title":"Bar Chart: API Methods Demonstration","text":"<pre><code># Demonstration of multiple ways to work with the Chart Gizmo API\nfrom H5Gizmos import serve, Stack\nfrom chart_gizmo.bars import BarChart\nfrom chart_gizmo.data_config import DataSet\n\n# Create a bar chart\nchart = BarChart(width=800, height=500)\n\n# Add region labels\nchart.add_label(\"Region 1\")\nchart.add_label(\"Region 2\")\n\n# Method 1: Add data values with custom styling\nchart.add_data_values(\"Revenue\", [350, 420],\n                     background_color=\"rgba(54, 162, 235, 0.6)\",\n                     border_color=\"rgba(54, 162, 235, 1)\",\n                     border_width=2)\n\n# Method 2: Create and add a dataset using DataSet class\ndataset = DataSet(\"Expenses\", [250, 310])\ndataset.background_color = \"rgba(255, 99, 132, 0.6)\"\ndataset.border_color = \"rgba(255, 99, 132, 1)\"\ndataset.border_width = 2\nchart.add_dataset(dataset)\n\n# Method 3: Add data values with default styling\nchart.add_data_values(\"Profit\", [100, 110])\n\n# Customize chart options\nchart.options = {\n    \"responsive\": True,\n    \"maintainAspectRatio\": False,\n    \"plugins\": {\n        \"title\": {\n            \"display\": True,\n            \"text\": \"Financial Performance by Region\",\n            \"font\": {\"size\": 16}\n        },\n        \"legend\": {\"position\": \"bottom\"}\n    },\n    \"scales\": {\n        \"x\": {\n            \"title\": {\"display\": True, \"text\": \"Regions\"},\n            \"grid\": {\n                \"offset\": True  # Align grid lines with bar edges\n            }\n        },\n        \"y\": {\n            \"title\": {\"display\": True, \"text\": \"Amount ($1000s)\"}\n        }\n    }\n}\n\n# Get and print the chart configuration (useful for debugging)\nconfig = chart.get_configuration()\nprint(\"Chart configuration:\")\nprint(config)\n\n# Create a stack with the chart and show it\nstack = Stack([\"API Methods Demonstration\", chart])\nserve(stack.show())\n</code></pre>"},{"location":"api/examples/#pie-chart-examples","title":"Pie Chart Examples","text":""},{"location":"api/examples/#basic-pie-chart","title":"Basic Pie Chart","text":"<pre><code>from H5Gizmos import serve\nfrom chart_gizmo.pie import PieChart\n\n# Create a new pie chart\nchart = PieChart(width=600, height=400)\n\n# Add labels for each slice\nfor fruit in [\"Apples\", \"Oranges\", \"Bananas\", \"Grapes\", \"Kiwi\"]:\n    chart.add_label(fruit)\n\n# Add data with colors\nchart.add_data_values(\n    \"Fruits\",\n    [45, 25, 15, 10, 5],\n    background_color=[\n        \"rgba(255, 99, 132, 0.7)\",\n        \"rgba(54, 162, 235, 0.7)\",\n        \"rgba(255, 206, 86, 0.7)\",\n        \"rgba(75, 192, 192, 0.7)\",\n        \"rgba(153, 102, 255, 0.7)\"\n    ],\n    border_color=\"rgba(255, 255, 255, 0.8)\",\n    border_width=2\n)\n\n# Add click handler\ndef on_click(event):\n    print(f\"Clicked on: {event}\")\n\nchart.on_click_call(on_click)\n\n# Serve the chart\nserve(chart.show())\n</code></pre>"},{"location":"api/examples/#donut-chart","title":"Donut Chart","text":"<pre><code>from H5Gizmos import serve\nfrom chart_gizmo.pie import PieChart\n\n# Create a new chart and convert to donut\nchart = PieChart(width=600, height=400)\nchart.as_donut(0.6)  # Hole size is 60% of the radius\n\n# Add labels and data\nfor category in [\"Housing\", \"Food\", \"Transport\", \"Entertainment\", \"Savings\"]:\n    chart.add_label(category)\n\nchart.add_data_values(\n    \"Budget\",\n    [35, 25, 15, 10, 15],\n    background_color=[\n        \"rgba(255, 99, 132, 0.7)\",\n        \"rgba(54, 162, 235, 0.7)\",\n        \"rgba(255, 206, 86, 0.7)\",\n        \"rgba(75, 192, 192, 0.7)\",\n        \"rgba(153, 102, 255, 0.7)\"\n    ]\n)\n\n# Add custom options\nchart.options = chart.options or {}\nchart.options[\"plugins\"] = chart.options.get(\"plugins\", {})\nchart.options[\"plugins\"][\"title\"] = {\n    \"display\": True,\n    \"text\": \"Monthly Budget Breakdown\",\n    \"font\": {\"size\": 18}\n}\n\n# Serve the chart\nserve(chart.show())\n</code></pre>"},{"location":"api/examples/#csv-pie-chart","title":"CSV Pie Chart","text":"<pre><code>from H5Gizmos import serve\nfrom chart_gizmo.pie import CSVPieChart\n\n# Create chart from CSV file\nchart = CSVPieChart(\n    csv_file=\"data/data.csv\",\n    label_column=\"Category\",\n    value_column=\"Amount\",\n    width=800,\n    height=600,\n    donut=True,\n    donut_ratio=0.5\n)\n\n# Serve the chart\nserve(chart.show())\n</code></pre>"},{"location":"api/examples/#csv-pie-chart-with-grouping","title":"CSV Pie Chart with Grouping","text":"<pre><code>from H5Gizmos import serve\nfrom chart_gizmo.pie import CSVPieChart\n\n# Create chart from CSV file with grouping by year\nchart = CSVPieChart(\n    csv_file=\"data/data.csv\",\n    label_column=\"Category\",\n    value_column=\"Amount\",\n    group_column=\"Year\",\n    width=800,\n    height=600,\n    donut=True,\n    donut_ratio=0.6\n)\n\n# Serve the chart\nserve(chart.show())\n</code></pre>"},{"location":"api/examples/#chart-image-export","title":"Chart Image Export","text":"<pre><code>from H5Gizmos import serve, Button, Stack, Text, schedule_task\nimport chart_gizmo.bars as bars\nimport os\n\n# Create a simple bar chart for demonstration\nchart = bars.BarChart()\n\n# Add simple data\nchart.add_label(\"Category A\")\nchart.add_label(\"Category B\")\nchart.add_data_values(\"Series 1\", [80, 120], background_color=\"#3366CC\")\n\n# Create status text element\nstatus = Text(\"Ready to save chart image\")\n\n# Define the save function\nasync def save_chart_image(*args):\n    status.text(\"Saving chart image...\")\n\n    # Save the chart as PNG image\n    filename = \"chart_export.png\"\n    filepath = os.path.join(os.getcwd(), \"examples\", filename)\n\n    try:\n        await chart.saveImage(filepath)\n        status.text(f\"Chart saved successfully as {filepath}\")\n    except Exception as e:\n        status.text(f\"Error saving chart: {str(e)}\")\n\n# Create save button\nsave_button = Button(\"Save Chart as PNG\", on_click= lambda *args: schedule_task(save_chart_image(*args)))\n\n# Create the interface\ninterface = Stack([\n    \"Chart Image Export Example\",\n    chart,\n    [save_button,\n    status]\n])\n\n# Serve the application\nserve(interface.show())\n</code></pre>"},{"location":"api/examples/#onclick-event-example","title":"OnClick Event Example","text":"<pre><code>from chart_gizmo.pie import PieChart\nfrom H5Gizmos import serve, Text, Stack\n\n\n# Create a pie chart\npie_chart = PieChart(width=600, height=400)\n\n# Add labels and data\npie_chart.add_label(\"Apples\")\npie_chart.add_label(\"Oranges\")\npie_chart.add_label(\"Bananas\")\npie_chart.add_label(\"Grapes\")\npie_chart.add_label(\"Kiwi\")\npie_chart.add_data_values(\n    \"Fruits\",\n    [45, 25, 15, 10, 5],\n    background_color=[\n        \"rgba(255, 99, 132, 0.7)\",\n        \"rgba(54, 162, 235, 0.7)\",\n        \"rgba(255, 206, 86, 0.7)\",\n        \"rgba(75, 192, 192, 0.7)\",\n        \"rgba(153, 102, 255, 0.7)\"\n    ]\n)\n\n# Create a text component to display click information\nclick_info = Text(\"Click on a segment to see details.\")\n\n# Define the click callback function\ndef click_callback(event):\n    if event and \"label\" in event:\n        click_info.text(f\"You clicked on: {event['label']} with value: {event['value']}\")\n    else:\n        click_info.text(\"Click event did not contain label information.\")\n\n# Set the click callback\npie_chart.on_click_call(click_callback)\n\n# Create a stack to display the chart and the text component\ninterface = Stack([\n    \"Pie Chart Example\",\n    pie_chart,\n    click_info\n])\n\n# Serve the interface\nserve(interface.show())\n</code></pre>"},{"location":"api/histogram/","title":"Histogram","text":"<p>The <code>HistogramBarChart</code> class provides histogram chart functionality based on Chart.js Bar Charts with histogram-specific configuration. It uses NumPy's histogram function for data binning and analysis. Learn more about histograms on Wikipedia.</p> <p></p>"},{"location":"api/histogram/#basic-usage","title":"Basic Usage","text":"<pre><code>from H5Gizmos import serve\nimport numpy as np\nfrom chart_gizmo.histogrambar import HistogramBarChart\n\n# Generate sample data - a mix of two normal distributions\nnp.random.seed(42)  # For reproducibility\ndata1 = np.random.normal(loc=0, scale=1, size=1000)  # Mean 0, Std dev 1\ndata2 = np.random.normal(loc=3, scale=0.5, size=500)  # Mean 3, Std dev 0.5\ncombined_data = np.concatenate([data1, data2])\n\n# Create the histogram with 40 bins\nhistogram = HistogramBarChart(\n    data=combined_data,\n    y_label=\"Probability Density\"\n)\n\n# Display the histogram\nserve(histogram.show())\n</code></pre>"},{"location":"api/histogram/#class-histogrambarchart","title":"Class: HistogramBarChart","text":"<p>Location: <code>chart_gizmo/histogrambar.py</code></p>"},{"location":"api/histogram/#description","title":"Description","text":"<p>A class to represent a histogram bar chart. Inherits from <code>AbstractChart</code>.</p> <p>Creates a histogram bar chart from numerical data using numpy's histogram functionality. Inherits from <code>BarChart</code>.</p>"},{"location":"api/histogram/#constructor-parameters","title":"Constructor Parameters","text":"<ul> <li><code>width</code> (int): Chart width in pixels (default: 600)</li> <li><code>height</code> (int): Chart height in pixels (default: 400)</li> <li><code>title</code> (str): Chart title</li> <li><code>bins</code> (int): Number of bins for the histogram</li> <li><code>animate</code> (bool): Enable or disable animations. Default is <code>False</code> (no animation). Controlled by the symbolic constant <code>ANIMATION_DEFAULT</code>.</li> </ul>"},{"location":"api/histogram/#key-methods","title":"Key Methods","text":"<ul> <li><code>create_histogram(data)</code>: Create a histogram from data.</li> <li><code>from_file(filename, **kwargs)</code>: Create a histogram from a file.</li> <li><code>add_label(label)</code>: Add a label for each data point to the chart. The label should match the dataset value size.</li> <li><code>set_data(data)</code>: Set the data for the histogram. Data should be a list or NumPy array of numerical values.</li> <li><code>on_click_call(callback, action='click', selection='nearest')</code>: Set a callback function for click events on the chart. See OnClick Event Example.</li> <li><code>saveImage(filepath)</code>: Asynchronous method to save the chart as a PNG image file. Must be awaited when called. See Chart Image Export Example.<ul> <li><code>filepath</code>: Path where the image file will be saved</li> </ul> </li> </ul>"},{"location":"api/histogram/#example","title":"Example","text":"<pre><code>from chart_gizmo.histogrambar import HistogramBarChart\nfrom H5Gizmos import serve\n\nchart = HistogramBarChart(title=\"Example Histogram\", animate=False)\n\nchart.set_data([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])\n\nserve(chart.show())\n</code></pre>"},{"location":"api/histogram/#command-line-script","title":"Command-line Script","text":"<ul> <li><code>HistogramGizmoScript()</code>: Command-line script to create histogram from file.</li> </ul> <p>See the Histogram CLI documentation for detailed usage instructions on the command-line tool.</p>"},{"location":"api/lines/","title":"Lines","text":"<p>The <code>LineChart</code> and related classes provide line chart functionality based on Chart.js Line Charts.</p> <p></p>"},{"location":"api/lines/#basic-usage","title":"Basic Usage","text":"<pre><code>from chart_gizmo.lines import LineChart\nfrom H5Gizmos import serve\n\n# Create a line chart for monthly temperature data\nchart = LineChart()\n\n# Add month labels\nchart.add_label(\"Jan\")\nchart.add_label(\"Feb\")\nchart.add_label(\"Mar\")\nchart.add_label(\"Apr\")\nchart.add_label(\"May\")\nchart.add_label(\"Jun\")\n\n# Add temperature data for two cities\nchart.add_data_values(\"New York\", [3, 4, 8, 15, 21, 26],\n                      background_color=\"rgba(54, 162, 235, 0.2)\",\n                      border_color=\"rgba(54, 162, 235, 1)\")\nchart.add_data_values(\"San Francisco\", [12, 13, 14, 15, 16, 17],\n                      background_color=\"rgba(255, 99, 132, 0.2)\",\n                      border_color=\"rgba(255, 99, 132, 1)\")\n\n# Display the chart\nserve(chart.show())\n</code></pre>"},{"location":"api/lines/#class-linechart","title":"Class: LineChart","text":"<p>Location: <code>chart_gizmo/lines.py</code></p>"},{"location":"api/lines/#description","title":"Description","text":"<p>A class to represent a line chart. Inherits from <code>AbstractChart</code>.</p>"},{"location":"api/lines/#key-methods","title":"Key Methods","text":"<ul> <li><code>add_label(label, values=())</code>: Add a label to the chart.</li> <li><code>add_dataset(dataset)</code>: Add a dataset to the chart.</li> <li><code>add_data_values(label, values=(), background_color=None, border_color=None, border_width=1)</code>: Add data values to the chart.</li> <li><code>get_configuration()</code>: Get the chart configuration.</li> <li><code>saveImage(filepath)</code>: Asynchronous method to save the chart as a PNG image file. Must be awaited when called. See Chart Image Export Example.<ul> <li><code>filepath</code>: Path where the image file will be saved</li> </ul> </li> <li><code>on_click_call(callback, action='click', selection='nearest')</code>: Set a callback function for click events on the chart. See OnClick Event Example.</li> </ul>"},{"location":"api/lines/#class-csvlinechart","title":"Class: CSVLineChart","text":"<p>Location: <code>chart_gizmo/lines.py</code></p>"},{"location":"api/lines/#description_1","title":"Description","text":"<p>Create a line chart from a CSV file. Inherits from <code>CSVBarChart</code>.</p>"},{"location":"api/lines/#constructor-parameters","title":"Constructor Parameters","text":"<ul> <li><code>csv_file</code>: Path to the CSV file</li> <li><code>label_column</code>: Name of the column to use for x-axis labels</li> <li><code>value_column</code>: Name of the column to use for y-axis values</li> <li><code>group_column</code>: Name of the column to use for grouping (optional)</li> <li><code>width</code>: Chart width in pixels (default: 400)</li> <li><code>height</code>: Chart height in pixels (default: 400)</li> <li><code>stacked</code>: Whether to use stacked lines (default: False)</li> <li><code>configuration</code>: Chart.js configuration (optional)</li> <li><code>options</code>: Additional chart options (optional)</li> <li><code>title</code>: Chart title (optional)</li> <li><code>animate</code> (bool): Enable or disable animations. Default is <code>False</code> (no animation). Controlled by the symbolic constant <code>ANIMATION_DEFAULT</code>.</li> </ul>"},{"location":"api/lines/#example","title":"Example","text":"<pre><code>from chart_gizmo.lines import CSVLineChart\nfrom H5Gizmos import serve\n\nchart = CSVLineChart(\n    csv_file=\"data/data.csv\",\n    label_column=\"Category\",\n    value_column=\"Amount\",\n    group_column=\"Year\",\n    width=800,\n    height=400,\n    stacked=False,\n    title=\"Yearly expenses\",\n    animate=True,\n)\nserve(chart.show())\n</code></pre>"},{"location":"api/lines/#command-line-script","title":"Command-line Script","text":"<ul> <li><code>CSVLineChartScript()</code>: Command-line entrypoint for CSVLineChart.</li> </ul> <p>See the Line Chart CLI documentation for detailed usage instructions on the command-line tool.</p>"},{"location":"api/pie/","title":"Pie Charts","text":"<p>Pie charts are useful for showing proportional parts of a whole. They display data as slices of a circle with sizes proportional to their values. Chart Gizmo's pie charts are built on Chart.js Pie and Doughnut Charts.</p>"},{"location":"api/pie/#basic-usage","title":"Basic Usage","text":"<pre><code>from chart_gizmo.pie import PieChart\nfrom H5Gizmos import serve\n\n# Create a new pie chart\nchart = PieChart(width=600, height=400)\n\n# Add labels for each slice\nfor fruit in [\"Apples\", \"Oranges\", \"Bananas\", \"Grapes\", \"Kiwi\"]:\n    chart.add_label(fruit)\n\n# Add data with colors\nchart.add_data_values(\n    \"Fruits\",\n    [45, 25, 15, 10, 5],\n    background_color=[\n        \"rgba(255, 99, 132, 0.7)\",\n        \"rgba(54, 162, 235, 0.7)\",\n        \"rgba(255, 206, 86, 0.7)\",\n        \"rgba(75, 192, 192, 0.7)\",\n        \"rgba(153, 102, 255, 0.7)\"\n    ],\n    border_color=\"rgba(255, 255, 255, 0.8)\"\n)\n\n# Display the chart\nserve(chart.show())\n</code></pre>"},{"location":"api/pie/#donut-charts","title":"Donut Charts","text":"<p>You can convert a pie chart to a donut chart using the <code>as_donut()</code> method:</p> <pre><code>from chart_gizmo.pie import PieChart\nfrom H5Gizmos import serve\n\n# Create a new chart and convert to donut\nchart = PieChart(width=600, height=400)\nchart.as_donut(0.6)  # Hole size is 60% of the radius\n\n# Add labels and data\nfor category in [\"Housing\", \"Food\", \"Transport\", \"Entertainment\", \"Savings\"]:\n    chart.add_label(category)\n\nchart.add_data_values(\n    \"Budget\",\n    [35, 25, 15, 10, 15],\n    background_color=[\n        \"rgba(255, 99, 132, 0.7)\",\n        \"rgba(54, 162, 235, 0.7)\",\n        \"rgba(255, 206, 86, 0.7)\",\n        \"rgba(75, 192, 192, 0.7)\",\n        \"rgba(153, 102, 255, 0.7)\"\n    ]\n)\n\n# Display the chart\nserve(chart.show())\n</code></pre>"},{"location":"api/pie/#creating-pie-charts-from-csv","title":"Creating Pie Charts from CSV","text":"<p>You can easily create pie charts from CSV files using the <code>CSVPieChart</code> class:</p> <pre><code>from chart_gizmo.pie import CSVPieChart\nfrom H5Gizmos import serve\n\n# Create chart from CSV, specifying label and value columns\nchart = CSVPieChart(\n    csv_file=\"data/data.csv\",\n    label_column=\"Country\",\n    value_column=\"Population\",\n    width=800,\n    height=600\n)\n\n# Display the chart\nserve(chart.show())\n</code></pre>"},{"location":"api/pie/#api-reference","title":"API Reference","text":""},{"location":"api/pie/#piechart","title":"PieChart","text":"<pre><code>PieChart(configuration=None, width=400, height=400, donut=False, donut_ratio=0.5, options=None)\n</code></pre>"},{"location":"api/pie/#constructor-parameters","title":"Constructor Parameters:","text":"<ul> <li><code>configuration</code>: Optional chart configuration</li> <li><code>width</code> (int): Chart width in pixels (default: 400)</li> <li><code>height</code> (int): Chart height in pixels (default: 400)</li> <li><code>title</code> (str): Chart title</li> <li><code>donut</code> (bool): Whether to render the chart as a donut chart</li> <li><code>donut_ratio</code> (float): Ratio of the donut hole size (0-1)</li> <li><code>animate</code> (bool): Enable or disable animations. Default is <code>False</code> (no animation). Controlled by the symbolic constant <code>ANIMATION_DEFAULT</code>.</li> <li><code>on_click_call(callback, action='click', selection='nearest')</code>: Set a callback function for click events on the chart. See OnClick Event Example.</li> </ul>"},{"location":"api/pie/#methods","title":"Methods:","text":"<ul> <li><code>add_label(label)</code>: Add a slice label to the chart</li> <li><code>add_data_values(label, values, background_color, border_color, border_width)</code>: Add data values with colors</li> <li><code>as_donut(ratio)</code>: Convert to a donut chart with the specified hole ratio</li> <li><code>show()</code>: Returns a gizmo for display</li> <li><code>saveImage(filepath)</code>: Asynchronous method to save the chart as a PNG image file. Must be awaited when called. See Chart Image Export Example.</li> </ul>"},{"location":"api/pie/#csvpiechart","title":"CSVPieChart","text":"<pre><code>CSVPieChart(csv_file, label_column=None, value_column=None, width=400, height=400, donut=False, donut_ratio=0.5, configuration=None, options=None)\n</code></pre>"},{"location":"api/pie/#constructor-parameters_1","title":"Constructor Parameters:","text":"<ul> <li><code>csv_file</code>: Path to the CSV file</li> <li><code>label_column</code>: Name of the column to use for slice labels</li> <li><code>value_column</code>: Name of the column to use for slice values</li> <li><code>width</code>: Chart width in pixels</li> <li><code>height</code>: Chart height in pixels</li> <li><code>donut</code>: If True, creates a donut chart</li> <li><code>donut_ratio</code>: The size of the hole in a donut chart (0-1)</li> <li><code>configuration</code>: Optional chart configuration</li> <li><code>options</code>: Additional Chart.js options</li> <li><code>animate</code> (bool): Enable or disable animations. Default is <code>False</code> (no animation). Controlled by the symbolic constant <code>ANIMATION_DEFAULT</code>.</li> <li><code>on_click_call(callback, action='click', selection='nearest')</code>: Set a callback function for click events on the chart. See OnClick Event Example.</li> </ul>"},{"location":"api/pie/#command-line-script","title":"Command-line Script","text":"<ul> <li><code>CSVPieChartScript()</code>: Command-line entrypoint for CSVPieChart.</li> </ul> <p>See the Pie Chart CLI documentation for detailed usage instructions on the command-line tool.</p>"},{"location":"api/pie/#description","title":"Description","text":"<p>A class to represent a pie chart. Inherits from <code>AbstractChart</code>.</p>"},{"location":"cli/","title":"Command Line Tools","text":"<p>Chart Gizmo provides several command-line tools for quick visualization of data.</p> <p>Note: All example commands below assume you are running them from the <code>/examples</code> directory of your Chart Gizmo installation. Adjust file paths accordingly if you're running from a different location.</p>"},{"location":"cli/#available-command-line-tools","title":"Available Command Line Tools","text":"<p>Chart Gizmo provides the following command-line tools:</p> <ul> <li>ChartCLI - Base class for all command-line interfaces.</li> <li>Bar Chart CLI - Create bar charts from CSV files</li> <li>Line Chart CLI - Create line charts from CSV files</li> <li>Bubble Chart CLI - Create bubble charts from CSV files</li> <li>Histogram CLI - Create histograms from data files</li> <li>Pie Chart CLI - Create pie/donut charts from CSV files</li> </ul> <p>These tools allow you to quickly visualize your data directly from the command line without writing any code.</p>"},{"location":"cli/bar/","title":"Bar Chart CLI","text":"<p>The <code>csv-bar-gizmo</code> command-line tool allows you to quickly create bar charts from CSV data files. It's based on the BarChart API.</p> <p></p> <p>This CLI is built on top of the <code>ChartCLI</code> base class. For more details on the base CLI class, see the ChartCLI Documentation.</p>"},{"location":"cli/bar/#basic-usage","title":"Basic Usage","text":"<pre><code>csv-bar-gizmo data/data.csv -l \"Category\" -v \"Amount\" -g \"Year\"\n</code></pre> <p>This will create a bar chart from the CSV file, using the \"Category\" column for labels and the \"Amount\" column for values.</p>"},{"location":"cli/bar/#examples","title":"Examples","text":""},{"location":"cli/bar/#simple-grouped-bar-chart","title":"Simple Grouped Bar Chart","text":"<pre><code>csv-bar-gizmo life1999.csv -l \"Country Name\" -v \"Value\" -g \"Disaggregation\"\n</code></pre>"},{"location":"cli/bar/#with-custom-dimensions","title":"With Custom Dimensions","text":"<pre><code>csv-bar-gizmo life1999.csv -l \"Country Name\" -v \"Value\" -g \"Disaggregation\" --width 800 --height 600\n</code></pre>"},{"location":"cli/bar/#all-options","title":"All Options","text":"<ul> <li><code>-l</code>, <code>--label_column</code>: Column name for labels (x-axis)</li> <li><code>-v</code>, <code>--value_column</code>: Column name for values (y-axis)</li> <li><code>-g</code>, <code>--group_column</code>: Column name for grouping data into series</li> <li><code>-w</code>, <code>--width</code>: Width of chart in pixels</li> <li><code>-H</code>, <code>--height</code>: Height of chart in pixels</li> <li><code>--title</code>: Chart title</li> <li><code>--stacked</code>: Use stacked bar chart (default: False)</li> <li><code>--animate</code>: Enable animations (default: no animation)</li> </ul>"},{"location":"cli/boxplot/","title":"Box Plot Chart CLI","text":"<p>The <code>boxplot-gizmo</code> command-line tool allows you to quickly create boxplot charts from CSV data files. It's based on the BoxPlotChart API.</p> <p></p>"},{"location":"cli/boxplot/#basic-usage","title":"Basic Usage","text":"<pre><code>boxplot-gizmo data/data.csv --columns \"Amount,Score\"\n</code></pre> <p>This creates a boxplot for the \"Amount\" and \"Score\" columns in the CSV file.</p>"},{"location":"cli/boxplot/#grouped-boxplot-example","title":"Grouped Boxplot Example","text":"<pre><code>boxplot-gizmo data/data.csv --columns \"Amount,Score\" -g \"Year\"\n</code></pre> <p>This creates a grouped boxplot, grouping by the \"Year\" column.</p>"},{"location":"cli/boxplot/#real-world-example-state-population-by-year","title":"Real-World Example: State Population by Year","text":"<pre><code>boxplot-gizmo historical_state_population_by_year.csv --columns \"Population\" -g \"Year\" --title \"State Population Distribution by Year\" --animate\n</code></pre>"},{"location":"cli/boxplot/#all-options","title":"All Options","text":"<ul> <li><code>--columns</code>: Comma-separated list of columns to include as boxes (default: all except group column)</li> <li><code>-g</code>: Name of the column to group by (optional)</li> <li><code>-l</code>: Comma-separated list of labels for the x-axis (optional)</li> <li><code>--title</code>: Chart title (optional)</li> <li><code>--width</code>: Chart width in pixels (default: 600)</li> <li><code>--height</code>: Chart height in pixels (default: 400)</li> <li><code>--animate</code>: Enable animations (default: no animation)</li> </ul>"},{"location":"cli/boxplot/#more-examples","title":"More Examples","text":""},{"location":"cli/boxplot/#simple-boxplot","title":"Simple Boxplot","text":"<pre><code>boxplot-gizmo data/data.csv --columns \"Amount\"\n</code></pre>"},{"location":"cli/boxplot/#grouped-by-category","title":"Grouped by Category","text":"<pre><code>boxplot-gizmo data/data.csv --columns \"Amount\" -g \"Category\"\n</code></pre>"},{"location":"cli/boxplot/#see-also","title":"See Also","text":"<ul> <li>BoxPlotChart API</li> <li>Other CLI Tools</li> </ul>"},{"location":"cli/bubble/","title":"Bubble Chart CLI","text":"<p>The <code>csv-bubble-gizmo</code> command-line tool allows you to quickly create bubble charts from CSV data files. It's based on the BubbleChart API.</p> <p></p> <p>This CLI is built on top of the <code>ChartCLI</code> base class. For more details on the base CLI class, see the ChartCLI Documentation.</p>"},{"location":"cli/bubble/#basic-usage","title":"Basic Usage","text":"<pre><code>csv-bubble-gizmo filename -x \"x-column\" -y \"y-column\" -r \"r-column\"\n</code></pre> <p>This will create a bubble chart from the CSV file, using the \"x-column\" for x-axis, \"y-column\" for y-axis, and \"r-column\" for the bubble size.</p>"},{"location":"cli/bubble/#examples","title":"Examples","text":""},{"location":"cli/bubble/#simple-bubble-chart","title":"Simple Bubble Chart","text":"<pre><code>csv-bubble-gizmo gapminderDataFiveYear.csv -x \"gdpPercap\" -y \"lifeExp\" -r \"pop\" --log-x\n</code></pre>"},{"location":"cli/bubble/#bubble-chart-with-color-grouping","title":"Bubble Chart with Color Grouping","text":"<pre><code>csv-bubble-gizmo gapminderDataFiveYear.csv -x \"gdpPercap\" -y \"lifeExp\" -r \"pop\" -g \"continent\"\n</code></pre>"},{"location":"cli/bubble/#with-custom-bubble-size-range","title":"With Custom Bubble Size Range","text":"<pre><code>csv-bubble-gizmo gapminderDataFiveYear.csv -x \"gdpPercap\" -y \"lifeExp\" -r \"pop\" --min_radius 3 --max_radius 20\n</code></pre>"},{"location":"cli/bubble/#with-multiple-tooltip-columns","title":"With Multiple Tooltip Columns","text":"<pre><code>csv-bubble-gizmo gapminderDataFiveYear.csv -x \"gdpPercap\" -y \"lifeExp\" -r \"pop\" -g \"continent\" --tooltip_columns \"country,year\"\n</code></pre>"},{"location":"cli/bubble/#complete-customization-example","title":"Complete Customization Example","text":"<pre><code>csv-bubble-gizmo gapminderDataFiveYear.csv -x \"gdpPercap\" -y \"lifeExp\" -r \"pop\" -g \"continent\" --min_radius 3 --max_radius 20 --width 800 --height 600 --title \"Global Health &amp; Wealth\" --tooltip_columns country,gdpPercap,lifeExp,pop,year\n</code></pre>"},{"location":"cli/bubble/#all-options","title":"All Options","text":"<ul> <li><code>-x</code>: Column name for x-axis values</li> <li><code>-y</code>: Column name for y-axis values</li> <li><code>-r</code>: Column name for radius/bubble size values</li> <li><code>-g</code>: Column name for grouping/coloring bubbles</li> <li><code>--min_radius</code>: Minimum radius size (default: 5)</li> <li><code>--max_radius</code>: Maximum radius size (default: 15)</li> <li><code>-w</code>, <code>--width</code>: Width of chart in pixels</li> <li><code>--height</code>: Height of chart in pixels</li> <li><code>--title</code>: Chart title</li> <li><code>--bubble_label_column</code>: Column for bubble labels</li> <li><code>--tooltip_columns</code>: One or more columns to use for bubble tooltips on hover. Accepts single comma-separated string.</li> <li><code>--animate</code>: Enable animations (default: no animation)</li> </ul>"},{"location":"cli/bubble/#example","title":"Example","text":"<pre><code>csv-bubble-gizmo gapminderDataFiveYear.csv -x \"gdpPercap\" -y \"lifeExp\" -r \"pop\" --animate\n</code></pre> <p>This will create a bubble chart with animations enabled, using the \"gdpPercap\" column for x-axis, \"lifeExp\" for y-axis, and \"pop\" for bubble size.</p>"},{"location":"cli/chartcli/","title":"ChartCLI","text":"<p>The <code>ChartCLI</code> class is the base class for all command-line interfaces in the <code>chart_gizmo</code> library. It provides a flexible framework for creating charts from the command line, handling argument parsing, chart creation, and chart display.</p>"},{"location":"cli/chartcli/#description","title":"Description","text":"<p>The <code>ChartCLI</code> class is designed to be subclassed by specific chart CLI implementations. Subclasses should implement the <code>create_chart</code> method to define how charts are created based on parsed arguments.</p>"},{"location":"cli/chartcli/#subclasses","title":"Subclasses","text":"<ul> <li><code>CSVChartCLI</code>: Handles charts created from CSV files.</li> </ul>"},{"location":"cli/chartcli/#usage","title":"Usage","text":""},{"location":"cli/chartcli/#running-as-gizmos-window","title":"Running as Gizmos Window","text":"<p>If the user wants to run the CLI as a gizmos window, the implementation can look like this:</p> <pre><code>def CSVPieChartScript():\n    \"\"\"Command-line entrypoint for CSVPieChart\"\"\"\n    cli = CSVChartCLI(CSVPieChart,\n                      {\n                          \"custom_commands_args\": [\n                              {\n                                  \"name\": \"donut\",\n                                  \"flags\": [\"-d\", \"--donut\"],\n                                  \"help\": \"Create a donut chart instead of a pie chart\",\n                                  \"action\": \"store_true\"  # No type or required for boolean flags\n                              },\n                              {\n                                  \"name\": \"donut_ratio\",\n                                  \"flags\": [\"--donut-ratio\"],\n                                  \"help\": \"Ratio for the donut hole size (0-1)\",\n                                  \"required\": False,\n                                  \"default\": 0.5,\n                                  \"type\": float\n                              }\n                          ]\n                      }\n                    )\n    cli.run()\n</code></pre>"},{"location":"cli/chartcli/#custom-create_chart-method","title":"Custom <code>create_chart</code> Method","text":"<p>Alternatively, users can define a custom <code>create_chart</code> method in their subclass to handle specific chart creation logic:</p> <pre><code>from chart_gizmo.cli import ChartCLI\n\nclass MyCustomCLI(ChartCLI):\n    def create_chart(self, args):\n        # Custom chart creation logic\n        pass\n\ncli = MyCustomCLI(MyChartClass)\ncli.run()\n</code></pre>"},{"location":"cli/chartcli/#key-methods","title":"Key Methods","text":"<ul> <li><code>parse_args(args=None)</code>: Parse command-line arguments.</li> <li><code>create_chart(args)</code>: Create a chart from parsed arguments (must be implemented by subclasses).</li> <li><code>run(args=None)</code>: Parse arguments, create the chart, and serve it.</li> </ul>"},{"location":"cli/chartcli/#common-arguments","title":"Common Arguments","text":"<ul> <li><code>--width</code>: Chart width in pixels (default: 400)</li> <li><code>--height</code>: Chart height in pixels (default: 400)</li> <li><code>--stacked</code>: Create a stacked chart</li> <li><code>--log</code>: Use logarithmic scale for the y-axis</li> <li><code>--log-x</code>: Use logarithmic scale for the x-axis</li> <li><code>--animate</code>: Enable or disable animations (default: <code>False</code>)</li> <li><code>--responsive</code>: Make chart fits in screen also maintaining aspect ratio, <code>False</code> if height or weight is provided or flag is provided (default: <code>True</code>)</li> </ul>"},{"location":"cli/chartcli/#links","title":"Links","text":"<ul> <li>API Documentation for ChartCLI</li> <li>CLI Documentation Index</li> </ul>"},{"location":"cli/histogram/","title":"Histogram CLI","text":"<p>The <code>histogram-gizmo</code> command-line tool allows you to create histograms from data files containing numerical values. It's based on the HistogramBarChart API.</p> <p></p>"},{"location":"cli/histogram/#basic-usage","title":"Basic Usage","text":"<pre><code>histogram-gizmo data_file.txt\n</code></pre> <p>This will create a histogram from a text file containing numbers (one per line).</p>"},{"location":"cli/histogram/#examples","title":"Examples","text":""},{"location":"cli/histogram/#basic-histogram-with-default-settings","title":"Basic Histogram with Default Settings","text":"<pre><code>histogram-gizmo data/sample_10000.txt\n</code></pre>"},{"location":"cli/histogram/#customize-the-number-of-bins","title":"Customize the Number of Bins","text":"<pre><code>histogram-gizmo data/sample_10000.txt -b 20\nhistogram-gizmo data/sample_10000.txt -b 50\n</code></pre>"},{"location":"cli/histogram/#create-a-density-plot","title":"Create a Density Plot","text":"<pre><code>histogram-gizmo data/sample_10000.txt -d\n</code></pre>"},{"location":"cli/histogram/#focus-on-a-specific-range","title":"Focus on a Specific Range","text":"<pre><code>histogram-gizmo data/sample_10000.txt -r 30 70\n</code></pre>"},{"location":"cli/histogram/#change-chart-dimensions","title":"Change Chart Dimensions","text":"<pre><code>histogram-gizmo data/sample_10000.txt -w 1200 --height 700\n</code></pre>"},{"location":"cli/histogram/#add-title-and-axis-labels","title":"Add Title and Axis Labels","text":"<pre><code>histogram-gizmo data/sample_10000.txt --title \"Distribution\" --x-label \"Value\" --y-label \"Frequency\"\n</code></pre>"},{"location":"cli/histogram/#combined-options","title":"Combined Options","text":"<pre><code>histogram-gizmo data/sample_10000.txt -b 50 -d -r 20 80 --title \"Sample Data Distribution\" -w 1000 --height 600 --x-label \"Sample Values\" --y-label \"Probability Density\"\n</code></pre>"},{"location":"cli/histogram/#read-numpy-file","title":"Read NumPy File","text":"<pre><code>histogram-gizmo data/perfect_normal.npy\n</code></pre>"},{"location":"cli/histogram/#enable-animations","title":"Enable Animations","text":"<pre><code>histogram-gizmo data/sample_10000.txt --animate\n</code></pre>"},{"location":"cli/histogram/#all-options","title":"All Options","text":"<ul> <li><code>-b</code>, <code>--bins</code>: Number of bins for the histogram (default: 30)</li> <li><code>-d</code>, <code>--density</code>: Create a density plot instead of frequency count (default: False)</li> <li><code>-r</code>, <code>--range</code>: Range of values to include as \"min max\" (e.g., \"30 70\")</li> <li><code>-w</code>, <code>--width</code>: Width of chart in pixels</li> <li><code>--height</code>: Height of chart in pixels</li> <li><code>--title</code>: Chart title</li> <li><code>--x-label</code>: Label for x-axis</li> <li><code>--y-label</code>: Label for y-axis</li> <li><code>--animate</code>: Enable animations (default: no animation)</li> </ul>"},{"location":"cli/line/","title":"Line Chart CLI","text":"<p>The <code>csv-line-gizmo</code> command-line tool allows you to quickly create line charts from CSV data files. It's based on the LineChart API.</p> <p></p> <p>This CLI is built on top of the <code>ChartCLI</code> base class. For more details on the base CLI class, see the ChartCLI Documentation.</p>"},{"location":"cli/line/#basic-usage","title":"Basic Usage","text":"<pre><code>csv-line-gizmo data.csv -l \"Date\" -v \"Value\"\n</code></pre> <p>This will create a line chart from the CSV file, using the \"Date\" column for labels (x-axis) and the \"Value\" column for values (y-axis).</p>"},{"location":"cli/line/#examples","title":"Examples","text":""},{"location":"cli/line/#simple-line-chart","title":"Simple Line Chart","text":"<pre><code>csv-line-gizmo life1999.csv -l \"Country Name\" -v \"Value\"\n</code></pre>"},{"location":"cli/line/#multiple-series-line-chart","title":"Multiple Series Line Chart","text":"<pre><code>csv-line-gizmo life1999.csv -l \"Country Name\" -v \"Value\" -g \"Disaggregation\"\n</code></pre>"},{"location":"cli/line/#with-custom-dimensions","title":"With Custom Dimensions","text":"<pre><code>csv-line-gizmo life1999.csv -l \"Country Name\" -v \"Value\" -g \"Disaggregation\" --width 800 --height 600\n</code></pre>"},{"location":"cli/line/#all-options","title":"All Options","text":"<ul> <li><code>-l</code>, <code>--label</code>: Column name for labels (x-axis)</li> <li><code>-v</code>: Column name for values (y-axis)</li> <li><code>-g</code>: Column name for grouping data into series</li> <li><code>-w</code>, <code>--width</code>: Width of chart in pixels</li> <li><code>-H</code>, <code>--height</code>: Height of chart in pixels</li> <li><code>--title</code>: Chart title</li> <li><code>--animate</code>: Enable animations (default: no animation)</li> </ul>"},{"location":"cli/pie/","title":"Pie Chart CLI","text":"<p>The <code>csv-pie-gizmo</code> command-line tool allows you to quickly create pie and donut charts from CSV data files. It's based on the PieChart API.</p>"},{"location":"cli/pie/#basic-usage","title":"Basic Usage","text":"<pre><code>csv-pie-gizmo data.csv -l \"Category\" -v \"Amount\"\n</code></pre> <p>This will create a pie chart from the CSV file, using the \"Category\" column for slice labels and the \"Amount\" column for slice values.</p>"},{"location":"cli/pie/#examples","title":"Examples","text":""},{"location":"cli/pie/#simple-pie-chart","title":"Simple Pie Chart","text":"<pre><code>csv-pie-gizmo data/data.csv -l \"Category\" -v \"Amount\" --width 800 --height 600\n</code></pre>"},{"location":"cli/pie/#donut-chart","title":"Donut Chart","text":"<pre><code>csv-pie-gizmo data/data.csv -l \"Category\" -v \"Amount\" --donut\n</code></pre>"},{"location":"cli/pie/#donut-chart-with-custom-ratio","title":"Donut Chart with Custom Ratio","text":"<pre><code>csv-pie-gizmo data/data.csv -l \"Category\" -v \"Amount\" --donut --donut-ratio 0.7 --width 800 --height 600\n</code></pre>"},{"location":"cli/pie/#grouped-pie-chart-by-year","title":"Grouped Pie Chart by Year","text":"<pre><code>csv-pie-gizmo data/data.csv -l \"Category\" -v \"Amount\" -g \"Year\"\n</code></pre>"},{"location":"cli/pie/#complex-example","title":"Complex Example","text":"<pre><code>csv-pie-gizmo life1999.csv -l \"Disaggregation\" -v \"Value\" --width 900 --height 700 --donut --donut-ratio 0.6 --title \"Life Expectancy Distribution\"\n</code></pre>"},{"location":"cli/pie/#all-options","title":"All Options","text":"<ul> <li><code>-l</code>: Column name for slice labels</li> <li><code>-v</code>: Column name for slice values</li> <li><code>-g</code>: Column name for grouping data into multiple datasets</li> <li><code>-w</code>, <code>--width</code>: Width of chart in pixels</li> <li><code>-H</code>, <code>--height</code>: Height of chart in pixels</li> <li><code>--donut</code>: Create a donut chart instead of a pie chart</li> <li><code>--donut-ratio</code>: Size of the donut hole (0.0-1.0, default: 0.5)</li> <li><code>--title</code>: Chart title</li> <li><code>--animate</code>: Enable animations (default: no animation)</li> </ul>"}]}